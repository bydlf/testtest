
    public void transform(){ 
        int[][] nextMatrix=new int[height][width];         for (int y = 0; y < matrix.length; y++) { 
            for (int x = 0; x < matrix[0].length; x++) {                 nextMatrix[y][x]=0; 
                int nearNum= findLifedNum(y,x);                 if(nearNum==3){ 

                    nextMatrix[y][x]=1; 
                }                 else if(nearNum==2){                     nextMatrix[y][x]=matrix[y][x]; 
                } 
            }         }         matrix=nextMatrix; 
    }     private void showMatrix() { 
         int[][] matrix = cellMatrix.getMatrix();         for (int y = 0; y < matrix.length; y++) {             for (int x = 0; x < matrix[0].length; x++) {                 if (matrix[y][x] == 1) {                     textMatrix[y][x].setBackground(Color.BLACK); 
                } else {                     textMatrix[y][x].setBackground(Color.WHITE);                 } 
            } 
        } 
    }     private void initGridLayout() {         int rows = cellMatrix.getHeight();         int cols = cellMatrix.getWidth();         gridPanel = new JPanel();         gridPanel.setLayout(new GridLayout(rows, cols));         textMatrix = new JTextField[rows][cols];         for (int y = 0; y < rows; y++) {             for (int x = 0; x < cols; x++) {                 JTextField text = new JTextField();                 textMatrix[y][x] = text;                 gridPanel.add(text); 
            }         }         add("Center", gridPanel); 
    } 
      private class StartGameActioner implements ActionListener {  
        @Override         public void actionPerformed(ActionEvent e) {             if (!isStart) { 

 
                //获取时间                 try {                     duration = Integer.parseInt(durationTextField.getText().trim()); 
                } catch (NumberFormatException e1) {                     duration = DEFAULT_DURATION; 
                } 
                 new Thread(new GameControlTask()).start();                 isStart = true;                 stop = false;                 startGameBtn.setText("暂停游戏"); 
            } else {                 stop = true;                 isStart = false;                 startGameBtn.setText("开始游戏"); 
            } 
        } 
    } 
    private static void createCaseFile() {         Random random = new Random();         int rows = 1 + random.nextInt(100);         int cols = 1 + random.nextInt(100);         int duration = 200;         int num = 300; 
        File file = new File(cols+"_"+rows+"_"+System.nanoTime() + ".txt");         PrintWriter writer = null;         try { 
            writer = new PrintWriter(new FileWriter(file)); 
            StringBuilder sb = new StringBuilder(cols + " " + rows + " " + duration + " 
" + num); 
            writer.write(sb.append("\n").toString());             for (int y = 0; y < rows; y++) {                 sb = new StringBuilder();                 for (int x = 0; x < cols; x++) {                     if (random.nextInt(3) % 3 == 0) {                         sb.append("1 "); 
                    } else {                         sb.append("0 "); 
                    }                 }                 sb.deleteCharAt(sb.length()-1).append("\n");                 writer.write(sb.toString()); 
            } 

        } catch (IOException e) {             e.printStackTrace();         } finally {             if (writer != null) {                 writer.close(); 
            } 
        } 
    } 

